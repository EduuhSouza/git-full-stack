package salas;

public class SalaEvolucao extends Sala{
    public SalaEvolucao() {
        super("Evolu√ß√£o do Git", "Nesta sala exploraremos mais e evolu√ß√£o do Git do mercado");
    }

    @Override
    public void exibirConteudo() {
        System.out.println("___________________");
        System.out.println("Sala: " + getNome());
        System.out.println("Descri√ß√£o: " + getDescricao());

        String codigo = """
                __________________________________
                In√≠cio e Ado√ß√£o Inicial (2005‚Äì2008)
                
                Criado por Linus Torvalds em 2005, para gerenciar o c√≥digo do kernel do Linux.
                Ganhou rapidamente a confian√ßa da comunidade de c√≥digo aberto por ser r√°pido, confi√°vel e distribu√≠do.
                Inicialmente, o uso era mais t√©cnico e limitado a projetos open source avan√ßados.
                
                __________________________________
                üåç Expans√£o e Populariza√ß√£o (2008‚Äì2012)
                - Com o surgimento do GitHub em 2008, o Git ficou muito mais acess√≠vel e amig√°vel.
                - GitHub trouxe funcionalidades sociais (como pull requests, issues e forks), tornando o Git mais atrativo e colaborativo.
                - Come√ßou a ser adotado por startups e pequenas empresas.
                
                __________________________________
                üè¢ Ado√ß√£o Corporativa e Consolida√ß√£o (2012‚Äì2018)
                - Gigantes como Google, Facebook, Microsoft, e Netflix passaram a usar Git internamente.
                - Empresas migraram de ferramentas como Subversion (SVN) e Mercurial para o Git.
                - Ferramentas como GitLab e Bitbucket surgiram como alternativas ao GitHub.
                - O Git se consolidou como o padr√£o de fato para controle de vers√£o.
                
                __________________________________
                ü§ù Aquisi√ß√£o e Maturidade (2018‚Äì2022)
                - Em 2018, a Microsoft comprou o GitHub, mostrando o quanto a tecnologia se tornou estrat√©gica.
                - Git passou a ser integrado a plataformas de CI/CD, DevOps e gest√£o de projetos.
                - Ferramentas gr√°ficas, editores (como VS Code) e IDEs passaram a oferecer suporte nativo ao Git.
                
                __________________________________
                üîÑ Atualidade e Futuro (2023 em diante)
                
                - Git continua sendo a base para o desenvolvimento colaborativo global.
                - Projetos de qualquer escala, de apps simples a sistemas de intelig√™ncia artificial, usam Git.
                - Integra√ß√µes com IA, automa√ß√£o de merges e melhorias em usabilidade t√™m sido foco recente.
                - A comunidade continua ativa, e o Git evolui com foco em performance, usabilidade e integra√ß√£o com novas tecnologias.
                
                __________________________________
                üìä Conclus√£o:
                O Git passou de uma ferramenta t√©cnica para um pilar da engenharia de software moderna. 
                Hoje, √© essencial n√£o s√≥ para desenvolvedores, mas para equipes inteiras que trabalham com tecnologia, documenta√ß√£o e produto.
                """;

        System.out.println(codigo);
    }
}
